import telebot
from telebot import types
import logging
import json
import os
from datetime import datetime

API_TOKEN = 'yoir token'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(API_TOKEN)

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'bot_responses.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def init_data_file():
    if not os.path.exists(DATA_FILE) or os.path.getsize(DATA_FILE) == 0:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
def save_response(user_id, username, role, question, answer):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(DATA_FILE) or os.path.getsize(DATA_FILE) == 0:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            data = []
        else:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                if not isinstance(data, list):
                    data = []  # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                data = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        data.append({
            'user_id': str(user_id),
            'username': username or '',
            'role': role,
            'question': question,
            'answer': answer,
            'timestamp': datetime.now().isoformat()
        })
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON: {e}")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def get_restart_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("/start"))
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
def get_role_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üíÖ –ö–ª–∏–µ–Ω—Ç", callback_data="role_client"),
        types.InlineKeyboardButton("üîß –ú–∞—Å—Ç–µ—Ä", callback_data="role_master")
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
def get_master_start_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ö–ª–∞—Å—Å", callback_data="master_class"),
        types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data="master_not_great"),
        types.InlineKeyboardButton("–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="master_no_interest")
    )
    return keyboard

def get_master_paid_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–î–∞", callback_data="master_paid_yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="master_paid_no")
    )
    return keyboard

def get_master_why_not_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ù–µ –ø–æ–ª–µ–∑–Ω–æ", callback_data="master_useless"),
        types.InlineKeyboardButton("–ù–µ –≤—Å—ë —É—á–∏—Ç—ã–≤–∞–µ—Ç", callback_data="master_incomplete")
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
def get_client_start_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ö–ª–∞—Å—Å", callback_data="client_class"),
        types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data="client_not_great"),
        types.InlineKeyboardButton("–ù–µ –ø–æ–Ω—è–ª –∏–¥–µ—é", callback_data="client_dont_understand")
    )
    return keyboard

def get_client_usage_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–î–∞, –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="client_free"),
        types.InlineKeyboardButton("–ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å", callback_data="client_paid"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="client_no")
    )
    return keyboard

# /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ –≤—ã –ø–æ —Ä–æ–ª–∏?", reply_markup=get_role_keyboard())

# --- –ú–∞—Å—Ç–µ—Ä–∞ ---
@bot.callback_query_handler(func=lambda call: call.data == 'role_master')
def master_intro(call):
    save_response(call.from_user.id, call.from_user.username, "–ú–∞—Å—Ç–µ—Ä", "–†–æ–ª—å", "–ú–∞—Å—Ç–µ—Ä")
    try:
        with open('master_video.MOV', 'rb') as video_file:
            bot.send_video(call.from_user.id, video_file, caption="üé• –í–∏–¥–µ–æ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        bot.send_message(call.from_user.id, "üé• [–í–∏–¥–µ–æ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤]")
    
    bot.send_message(call.from_user.id, "–ö–∞–∫ –≤–∞–º –∏–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", reply_markup=get_master_start_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('master_'))
def master_logic(call):
    user_id = call.from_user.id
    username = call.from_user.username
    data = call.data
    mapping = {
        "master_class": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ö–ª–∞—Å—Å"),
        "master_not_great": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ù–µ –æ—á–µ–Ω—å"),
        "master_no_interest": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"),
        "master_paid_yes": ("–ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è", "–î–∞"),
        "master_paid_no": ("–ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è", "–ù–µ—Ç"),
        "master_useless": ("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", "–ù–µ –ø–æ–ª–µ–∑–Ω–æ"),
        "master_incomplete": ("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", "–ù–µ –≤—Å—ë —É—á–∏—Ç—ã–≤–∞–µ—Ç")
    }
    if data in mapping:
        q, a = mapping[data]
        save_response(user_id, username, "–ú–∞—Å—Ç–µ—Ä", q, a)
        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if data == "master_class":
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã –ø–ª–∞—Ç–Ω–æ?", reply_markup=get_master_paid_keyboard())
        elif data == "master_not_great":
            bot.send_message(user_id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?")
        elif data == "master_paid_yes":
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?", reply_markup=get_restart_keyboard())
        elif data == "master_paid_no":
            bot.send_message(user_id, "–ü–æ—á–µ–º—É? –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å?")
        elif data == "master_no_interest":
            bot.send_message(user_id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ? –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–µ–∑–Ω–æ –∏–ª–∏ –Ω–µ –≤—Å—ë —É—á–∏—Ç—ã–≤–∞–µ—Ç?", reply_markup=get_master_why_not_keyboard())
        elif data in ["master_useless", "master_incomplete"]:
            bot.send_message(user_id, "–ß—Ç–æ –≤–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ? –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=get_restart_keyboard())
    bot.answer_callback_query(call.id)

# --- –ö–ª–∏–µ–Ω—Ç—ã ---
@bot.callback_query_handler(func=lambda call: call.data == 'role_client')
def client_intro(call):
    save_response(call.from_user.id, call.from_user.username, "–ö–ª–∏–µ–Ω—Ç", "–†–æ–ª—å", "–ö–ª–∏–µ–Ω—Ç")
    try:
        with open('client_video.MOV', 'rb') as video_file:
            bot.send_video(call.from_user.id, video_file, caption="üé• –í–∏–¥–µ–æ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        bot.send_message(call.from_user.id, "üé• [–í–∏–¥–µ–æ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤]")
    
    bot.send_message(call.from_user.id, "–ö–∞–∫ –≤–∞–º –∏–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", reply_markup=get_client_start_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('client_'))
def client_logic(call):
    user_id = call.from_user.id
    username = call.from_user.username
    data = call.data
    mapping = {
        "client_class": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ö–ª–∞—Å—Å"),
        "client_not_great": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ù–µ –æ—á–µ–Ω—å"),
        "client_dont_understand": ("–ò–¥–µ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ù–µ –ø–æ–Ω—è–ª –∏–¥–µ—é"),
        "client_free": ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "–ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"),
        "client_paid": ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "–ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å"),
        "client_no": ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "–ù–µ—Ç")
    }
    if data in mapping:
        q, a = mapping[data]
        save_response(user_id, username, "–ö–ª–∏–µ–Ω—Ç", q, a)
        if data in ["client_class", "client_not_great"]:
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã —Ç–∞–∫–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?", reply_markup=get_client_usage_keyboard())
        elif data == "client_dont_understand":
            bot.send_message(user_id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ? –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å, –∫–∞–∫ –≤—ã –ø–æ–Ω—è–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", reply_markup=get_restart_keyboard())
        elif data == "client_free":
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –±—ã –≤–∞–º –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=get_restart_keyboard())
        elif data == "client_paid":
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ç–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –º–µ—Å—è—Ü?", reply_markup=get_restart_keyboard())
        elif data == "client_no":
            bot.send_message(user_id, "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?", reply_markup=get_restart_keyboard())
    bot.answer_callback_query(call.id)

# –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
@bot.message_handler(func=lambda message: True)
def collect_open_feedback(message):
    if message.text != "/start":
        save_response(message.from_user.id, message.from_user.username, "–û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", message.text)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! üòä", reply_markup=get_restart_keyboard())

if __name__ == '__main__':
    init_data_file()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot.polling(none_stop=True)
